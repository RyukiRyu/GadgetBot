const axios = require('axios');
const tunnel = require('tunnel');
const fs = require('fs');

// Daftar proxy dengan format { host, port, username, password }
const proxies = [
    { host: '88.218.72.182', port: 9886, username: 'LJNekt', password: 'hDWcCN' },
    { host: '38.170.252.98', port: 9604, username: 'E1Swxj', password: 'qtNtYw' },
];

// File penyimpanan jumlah penggunaan proxy harian
const USED_PROXIES_FILE = 'used_proxies.json';
const MAX_HITS_PER_PROXY = 6;

// Fungsi untuk membaca data penggunaan proxy
const getUsedProxies = () => {
    if (fs.existsSync(USED_PROXIES_FILE)) {
        const data = JSON.parse(fs.readFileSync(USED_PROXIES_FILE, 'utf-8'));
        const today = new Date().toISOString().split('T')[0];

        // Reset jika data tidak sesuai tanggal hari ini
        if (data.date !== today) {
            return { date: today, proxies: {} };
        }
        return data;
    }
    return { date: new Date().toISOString().split('T')[0], proxies: {} };
};

// Fungsi untuk menyimpan penggunaan proxy ke file
const saveUsedProxy = (proxy) => {
    const usedData = getUsedProxies();
    const today = new Date().toISOString().split('T')[0];

    if (usedData.date !== today) {
        usedData.date = today;
        usedData.proxies = {};
    }

    usedData.proxies[proxy.host] = (usedData.proxies[proxy.host] || 0) + 1;
    fs.writeFileSync(USED_PROXIES_FILE, JSON.stringify(usedData, null, 2));
};

// Fungsi memilih proxy yang belum mencapai batas penggunaan
const getAvailableProxy = () => {
    const usedData = getUsedProxies();
    const availableProxies = proxies.filter(p => 
        !usedData.proxies[p.host] || usedData.proxies[p.host] < MAX_HITS_PER_PROXY
    );

    if (availableProxies.length === 0) {
        console.error("Semua proxy telah mencapai batas harian (5x). Coba lagi besok.");
        process.exit(1);
    }

    return availableProxies[Math.floor(Math.random() * availableProxies.length)];
};

// Fungsi mengambil data dari URL dengan proxy
exports.getDataFromUrl = async (url) => {
    const proxy = getAvailableProxy();
    try {
        console.log(`Fetching data from: https://www.gsmarena.com${url}`);

        // Pilih proxy yang tersedia
        console.log(`Using proxy: ${proxy.host}:${proxy.port} (Hit ke-${(getUsedProxies().proxies[proxy.host] || 0) + 1})`);

        const agent = tunnel.httpsOverHttp({
            proxy: {
                host: proxy.host,
                port: proxy.port,
                proxyAuth: `${proxy.username}:${proxy.password}`
            }
        });

        const response = await axios({
            method: 'get',
            url: `https://www.gsmarena.com${url}`,
            httpsAgent: agent
        });

        console.log("Fetched data successfully.");

        // Simpan penggunaan proxy
        saveUsedProxy(proxy);
        
        return response.data;
    } catch (error) {
        saveUsedProxy(proxy);
        console.error("Error fetching data:", error);
        throw error;
    }
};

// Fungsi mengubah format harga
exports.getPrice = (text) => {
    const value = text.replace(',', '').split('â€‰');
    return {
        currency: value[0],
        price: parseFloat(value[1]),
    };
};
